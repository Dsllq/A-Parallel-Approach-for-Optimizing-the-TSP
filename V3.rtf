{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red251\green2\blue7;
\red253\green128\blue8;\red255\green255\blue10;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c100000\c14913\c0;
\cssrgb\c100000\c57637\c0;\cssrgb\c99942\c98555\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25600\viewh16120\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
#include <stdio.h>\
#include <unistd.h>      /* find current location */\
#include <stdlib.h>     /* srand, rand */\
#include <time.h>       /* clock_t, clock, CLOCKS_PER_SEC */\
#include <string.h>     /* strcat */\
#include <math.h>       /* math calc */\
#include <omp.h>\
#include <float.h>      \
\
#define INPUT_FILE_NAME "input.txt"\
#define NUMCITY 15      // Max number of input cities\
#define LANDSIZE 100    // Max value during random value generation\
#define square(A) ((A) * (A))\
\
typedef int City[2];\
\
void Input(City cities[]);                                   // Take input from file of city\
void generate(City cities[]);                               // Generate random city\
void print_cities(City cities[]);                           // Print all the cities\
float distance(City city1, City city2);                     // Find Distance between 2 cities\
void copy_tour(City citiesDest[], City citiesSource[]);     // Copy toured cities\
void copy_City(City dest, City source);                      // Copy one city to another\
void swap_cities(City city1, City city2);                   // Swap 2 cities\
void circ_perm(City cities[], int numCities);               // Circular permutation of cities\
void scramble(City cities[], City *pivot, int numCities);   // Generate all combinations by brute-force approach\
void target_function(City cities[]);                         // Get final smallest value by comparison\
float tour_length(City cities[]);                            // Get total tour length\
\
float shortestTourLength = FLT_MAX; \
City shortestTour[NUMCITY];\
int total_no_of_input = 0;\
\
int main() \{\
    City cities[NUMCITY];\
    Input(cities);\
    printf("Total No of Input = %d\\n", total_no_of_input);\
\
    // Time calculation Start\
    clock_t t;\
    t = clock();\
    \
    shortestTourLength = tour_length(cities);    // Generate initial value - not final\
    copy_tour(shortestTour, cities);\
    scramble(cities, cities, total_no_of_input);  // Parallelized section\
    printf("Found the shortest tour:\\n");\
    print_cities(shortestTour);\
    printf("Length is: %f\\n", shortestTourLength);\
\
    // Time calculation End\
    t = clock() - t;\
    printf("It took %f second(s).\\n", ((float)t) / CLOCKS_PER_SEC);\
\
    getchar();\
    return 0;\
\}\
\
void Input(City cities[]) \{\
    FILE *fp;\
    char cwd[1024];\
\
    // Get current directory\
    if (getcwd(cwd, sizeof(cwd)) == NULL) \{  // Directory not found\
        perror("getcwd() error - Current directory not found !!");\
        exit(EXIT_FAILURE);\
    \}\
    \
    strcat(cwd, "/");  // Use '/' for compatibility with UNIX-like systems\
    strcat(cwd, INPUT_FILE_NAME);\
    fp = fopen(cwd, "r");\
\
    if (fp == NULL) \{  // Check if file opened successfully\
        perror("Error opening file");\
        exit(EXIT_FAILURE);\
    \}\
\
    int i = 0;\
    while (i < NUMCITY && fscanf(fp, "%d %d", &cities[i][0], &cities[i][1]) == 2) \{\
        printf("City[%d]: (%d, %d)\\n", i, cities[i][0], cities[i][1]); // Debug print\
        total_no_of_input++;\
        i++;\
    \}\
\
    fclose(fp); // Close the file\
\}\
\
void generate(City cities[]) \{\
    int i, j;\
    total_no_of_input = NUMCITY;\
    for (i = 0; i < NUMCITY; i++)\
        for (j = 0; j < 2; j++)\
            cities[i][j] = rand() % LANDSIZE;\
\}\
\
\
\cb4 float tour_length(City cities[]) \{\
    int i;\
    float length = 0.0;\
\
    #pragma omp parallel for reduction(+:length)\
    for (i = 0; i < total_no_of_input - 1; i++) \{\
        length += distance(cities[i], cities[i + 1]);  // Safe sum with reduction\
    \}\
    length += distance(cities[total_no_of_input - 1], cities[0]);  // No race condition here\
    return length;\
\}\cb3 \
\
\cb5 void target_function(City cities[]) \{\
    #pragma omp parallel\
    \{\
        float length = tour_length(cities);\
        #pragma omp critical\
        \{\
            if (length < shortestTourLength) \{  // Update inside critical section\
                shortestTourLength = length;\
                copy_tour(shortestTour, cities);\
            \}\
        \}\
    \}\
\}\
\cb3 \
\
\cb6 void scramble(City cities[], City *pivot, int numCities) \{\
    int i;\
    if (numCities <= 1) \{\
        target_function(cities);\
        return;\
    \}\
\
    #pragma omp parallel for\
    for (i = 0; i < numCities; i++) \{\
        City *newPivot = &pivot[1];\
        #pragma omp critical\
        scramble(cities, newPivot, numCities - 1);  // Critical section for safe recursion\
        circ_perm(pivot, numCities);\
    \}\
\}\cb3 \
\
\
\
void circ_perm(City cities[], int numCities) \{\
    int i;\
    City tmp;\
    copy_City(tmp, cities[0]);\
    for (i = 0; i < numCities - 1; i++)\
        copy_City(cities[i], cities[i + 1]);\
    copy_City(cities[numCities - 1], tmp);\
\}\
\
void copy_tour(City citiesDest[], City citiesSource[]) \{\
    int i;\
    for (i = 0; i < NUMCITY; i++)\
        copy_City(citiesDest[i], citiesSource[i]);\
\}\
\
void copy_City(City dest, City source) \{\
    dest[0] = source[0];\
    dest[1] = source[1];\
\}\
\
float distance(City city1, City city2) \{\
    return sqrtf((float)square(city2[0] - city1[0]) +\
                  (float)square(city2[1] - city1[1]));\
\}\
\
void print_cities(City cities[]) \{\
    int i;\
    for (i = 0; i < total_no_of_input; i++) \{\
        printf("(%d,%d)", cities[i][0], cities[i][1]);\
        if (i < total_no_of_input - 1)\
            printf(" , ");\
    \}\
    printf("\\n");\
\}\
\
\
}